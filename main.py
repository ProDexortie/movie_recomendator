# main.py
import os
import logging
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
import requests
import json
import random
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# API –∫–ª—é—á–∏
TMDB_API_KEY = os.getenv("TMDB_API_KEY")
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
GOOGLE_BOOKS_API_KEY = os.getenv("GOOGLE_BOOKS_API_KEY")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
START_ROUTES, GENRE_SELECTION, MOVIE_ACTIONS, MUSIC_ACTIONS, BOOK_ACTIONS = range(5)

# –ú–∞–ø–∏–Ω–≥ –∂–∞–Ω—Ä–æ–≤ –¥–ª—è Spotify API
SPOTIFY_GENRE_MAPPING = {
    "pop": "pop",
    "rock": "rock",
    "hip-hop": "hip hop",  # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å, —Ç–∞–∫ –∫–∞–∫ Spotify –º–æ–∂–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –µ–≥–æ
    "electronic": "electronic",
    "jazz": "jazz",
    "classical": "classical music"  # –î–æ–±–∞–≤–ª—è–µ–º "music" –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è %s", update, exc_info=context.error)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    error_message = str(context.error)
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç update –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update and isinstance(update, Update) and update.effective_message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_text = f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_over")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await update.effective_message.reply_text(
                error_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_db_connection():
    conn = sqlite3.connect('user_preferences.db')
    conn.row_factory = sqlite3.Row
    return conn

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        registration_date TEXT
    )
    ''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_preferences (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        category TEXT,
        genre TEXT,
        item_id TEXT,
        rating INTEGER,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS recommendation_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        category TEXT,
        item_id TEXT,
        recommendation_date TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def register_user(user_id, username, first_name, last_name):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, registration_date)
    VALUES (?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_preference(user_id, category, genre, item_id, rating):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO user_preferences (user_id, category, genre, item_id, rating)
    VALUES (?, ?, ?, ?, ?)
    ''', (user_id, category, genre, item_id, rating))
    
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def save_recommendation_history(user_id, category, item_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO recommendation_history (user_id, category, item_id, recommendation_date)
    VALUES (?, ?, ?, ?)
    ''', (user_id, category, item_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_preferences(user_id, category=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    if category:
        cursor.execute('''
        SELECT * FROM user_preferences
        WHERE user_id = ? AND category = ?
        ''', (user_id, category))
    else:
        cursor.execute('''
        SELECT * FROM user_preferences
        WHERE user_id = ?
        ''', (user_id,))
    
    preferences = cursor.fetchall()
    conn.close()
    
    return preferences

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
def generate_random_id():
    return f"fallback_{random.randint(10000, 99999)}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç API

async def get_movie_recommendations(genre_id=None, user_id=None):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã, –µ—Å–ª–∏ –∂–∞–Ω—Ä –Ω–µ —É–∫–∞–∑–∞–Ω
    if genre_id:
        url = f"https://api.themoviedb.org/3/discover/movie?api_key={TMDB_API_KEY}&with_genres={genre_id}&sort_by=popularity.desc&page=1"
    else:
        url = f"https://api.themoviedb.org/3/movie/popular?api_key={TMDB_API_KEY}&page=1"
    
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if 'results' in data and data['results']:
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if user_id:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute('''
                SELECT item_id FROM recommendation_history
                WHERE user_id = ? AND category = 'movie'
                ''', (user_id,))
                recommended_ids = [row['item_id'] for row in cursor.fetchall()]
                conn.close()
                
                filtered_results = [movie for movie in data['results'] if str(movie['id']) not in recommended_ids]
                if filtered_results:
                    movie = random.choice(filtered_results)
                else:
                    # –ï—Å–ª–∏ –≤—Å–µ —Ñ–∏–ª—å–º—ã —É–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã, –±–µ—Ä–µ–º –ª—é–±–æ–π
                    movie = random.choice(data['results'])
            else:
                movie = random.choice(data['results'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
            if user_id:
                save_recommendation_history(user_id, 'movie', str(movie['id']))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
            movie_url = f"https://api.themoviedb.org/3/movie/{movie['id']}?api_key={TMDB_API_KEY}&language=ru"
            movie_response = requests.get(movie_url, timeout=10)
            movie_response.raise_for_status()
            movie_data = movie_response.json()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
            title = movie_data.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            original_title = movie_data.get('original_title', '')
            year = movie_data.get('release_date', '')[:4] if movie_data.get('release_date') else '–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
            rating = movie_data.get('vote_average', 0)
            genres = ', '.join([genre['name'] for genre in movie_data.get('genres', [])])
            overview = movie_data.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            poster_path = movie_data.get('poster_path', None)
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None
            
            return {
                'id': movie['id'],
                'title': title,
                'original_title': original_title,
                'year': year,
                'rating': rating,
                'genres': genres,
                'overview': overview,
                'poster_url': poster_url
            }
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ñ–∏–ª—å–º–æ–≤: {e}")
        return None

async def get_spotify_token():
    url = "https://accounts.spotify.com/api/token"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
    }
    auth = (SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)
    data = {"grant_type": "client_credentials"}
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä verify=True –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
        response = requests.post(url, headers=headers, data=data, auth=auth, 
                               verify=True, timeout=30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            data = response.json()
            return data.get("access_token")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Spotify: HTTP {response.status_code} - {response.text}")
            return None
    except requests.exceptions.SSLError as e:
        logger.error(f"SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ Spotify: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –∫—Ä–∞–π–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            logger.warning("–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)")
            response = requests.post(url, headers=headers, data=data, auth=auth, 
                                   verify=False, timeout=30)
            if response.status_code == 200:
                data = response.json()
                return data.get("access_token")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Spotify: HTTP {response.status_code} - {response.text}")
                return None
        except Exception as alt_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–∞–∂–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL: {alt_e}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ Spotify: {e}")
        return None

async def get_music_recommendations(genre=None, user_id=None):
    token = await get_spotify_token()
    if not token:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Spotify, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
        return await get_music_recommendations_fallback(genre, user_id)
    
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∂–∞–Ω—Ä –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
        search_genre = genre
        if genre and genre in SPOTIFY_GENRE_MAPPING:
            search_genre = SPOTIFY_GENRE_MAPPING[genre]
            logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∂–∞–Ω—Ä '{genre}' –≤ '{search_genre}' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Spotify")
            
        # –ï—Å–ª–∏ –∂–∞–Ω—Ä —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ –∂–∞–Ω—Ä—É
        if search_genre:
            query = search_genre.replace(" ", "+")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–∫–∞—Ç—å —Ç—Ä–µ–∫–∏, –∞ –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
            search_url = f"https://api.spotify.com/v1/search?q=genre:{query}&type=track&limit=50"
            logger.info(f"–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ URL: {search_url}")
            
            try:
                response = requests.get(search_url, headers=headers, timeout=10)
                response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                data = response.json()
                
                if 'tracks' in data and 'items' in data['tracks'] and data['tracks']['items']:
                    tracks = data['tracks']['items']
                    track = random.choice(tracks)
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç—Ä–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç ID
                    if track and 'id' in track:
                        logger.info(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ –ø–æ –∂–∞–Ω—Ä—É: {track.get('name', 'unknown')}")
                    else:
                        logger.warning("–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫, –Ω–æ –±–µ–∑ ID, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                        return await get_music_recommendations_fallback(genre, user_id)
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä—É '{search_genre}', –∏—â—É –ø–ª–µ–π–ª–∏—Å—Ç—ã...")
                    
                    # –ï—Å–ª–∏ —Ç—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã
                    search_url = f"https://api.spotify.com/v1/search?q={query}&type=playlist&limit=10"
                    response = requests.get(search_url, headers=headers, timeout=10)
                    response.raise_for_status()
                    data = response.json()
                    
                    if 'playlists' in data and 'items' in data['playlists'] and data['playlists']['items']:
                        playlist = random.choice(data['playlists']['items'])
                        if not playlist or 'id' not in playlist:
                            logger.warning("–ü–æ–ª—É—á–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç –±–µ–∑ ID, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                            return await get_music_recommendations_fallback(genre, user_id)
                            
                        playlist_id = playlist['id']
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
                        tracks_url = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks?limit=20"
                        tracks_response = requests.get(tracks_url, headers=headers, timeout=10)
                        tracks_response.raise_for_status()
                        tracks_data = tracks_response.json()
                        
                        if 'items' in tracks_data and tracks_data['items']:
                            valid_tracks = [item for item in tracks_data['items'] 
                                          if item and 'track' in item and item['track'] and 'id' in item['track']]
                            
                            if valid_tracks:
                                track_item = random.choice(valid_tracks)
                                track = track_item['track']
                                logger.info(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ –ø–ª–µ–π–ª–∏—Å—Ç: {track.get('name', 'unknown')}")
                            else:
                                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                                return await get_music_recommendations_fallback(genre, user_id)
                        else:
                            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                            return await get_music_recommendations_fallback(genre, user_id)
                    else:
                        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ –∂–∞–Ω—Ä—É '{search_genre}', –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                        return await get_music_recommendations_fallback(genre, user_id)
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Spotify API: {e}")
                return await get_music_recommendations_fallback(genre, user_id)
        else:
            # –ï—Å–ª–∏ –∂–∞–Ω—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã
            try:
                tracks_url = "https://api.spotify.com/v1/browse/new-releases?limit=20"
                tracks_response = requests.get(tracks_url, headers=headers, timeout=10)
                tracks_response.raise_for_status()
                tracks_data = tracks_response.json()
                
                if 'albums' in tracks_data and 'items' in tracks_data['albums'] and tracks_data['albums']['items']:
                    albums = [album for album in tracks_data['albums']['items'] if album and 'id' in album]
                    
                    if not albums:
                        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ –∞–ª—å–±–æ–º—ã, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                        return await get_music_recommendations_fallback(genre, user_id)
                        
                    album = random.choice(albums)
                    album_id = album['id']
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –∞–ª—å–±–æ–º–∞
                    album_tracks_url = f"https://api.spotify.com/v1/albums/{album_id}/tracks?limit=10"
                    album_tracks_response = requests.get(album_tracks_url, headers=headers, timeout=10)
                    album_tracks_response.raise_for_status()
                    album_tracks_data = album_tracks_response.json()
                    
                    if 'items' in album_tracks_data and album_tracks_data['items']:
                        valid_tracks = [t for t in album_tracks_data['items'] if t and 'id' in t]
                        
                        if valid_tracks:
                            track = random.choice(valid_tracks)
                            logger.info(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ –∏–∑ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤: {track.get('name', 'unknown')}")
                        else:
                            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤ –∞–ª—å–±–æ–º–µ, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                            return await get_music_recommendations_fallback(genre, user_id)
                    else:
                        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–∫–∏ –≤ –∞–ª—å–±–æ–º–µ, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                        return await get_music_recommendations_fallback(genre, user_id)
                else:
                    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                    return await get_music_recommendations_fallback(genre, user_id)
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Spotify API –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤: {e}")
                return await get_music_recommendations_fallback(genre, user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è track_id
        if 'id' not in track:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Ç—Ä–µ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
            return await get_music_recommendations_fallback(genre, user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
        track_id = track['id']
        if user_id:
            try:
                save_recommendation_history(user_id, 'music', track_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        try:
            track_url = f"https://api.spotify.com/v1/tracks/{track_id}"
            track_response = requests.get(track_url, headers=headers, timeout=10)
            track_response.raise_for_status()
            track_data = track_response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            if not track_data:
                logger.warning("–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                return await get_music_recommendations_fallback(genre, user_id)
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–µ–π
            track_name = track_data.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            artists = ', '.join([artist.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç') for artist in track_data.get('artists', [])])
            
            album = track_data.get('album', {})
            album_name = album.get('name', '–ê–ª—å–±–æ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            
            preview_url = track_data.get('preview_url')
            
            album_images = album.get('images', [])
            album_image = album_images[0].get('url') if album_images and len(album_images) > 0 else None
            
            spotify_url = track_data.get('external_urls', {}).get('spotify')
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
            result = {
                'id': track_data.get('id', generate_random_id()),
                'track_name': track_name,
                'artists': artists,
                'album_name': album_name,
                'preview_url': preview_url,
                'album_image': album_image,
                'spotify_url': spotify_url
            }
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ: {track_name} - {artists}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ: {e}")
            return await get_music_recommendations_fallback(genre, user_id)
            
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º—É–∑—ã–∫–∏: {e}")
        return await get_music_recommendations_fallback(genre, user_id)

# –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def get_music_recommendations_fallback(genre=None, user_id=None):
    """
    –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ–≥–¥–∞ API Spotify –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID
    random_id = generate_random_id()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–∞
    fallback_recommendations = {
        "pop": {
            "id": random_id,
            "track_name": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ö–∏—Ç",
            "artists": "–ò–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
            "album_name": "–•–∏—Ç–æ–≤—ã–π –∞–ª—å–±–æ–º 2025",
            "preview_url": None,
            "album_image": "https://via.placeholder.com/300",
            "spotify_url": "https://open.spotify.com"
        },
        "rock": {
            "id": random_id,
            "track_name": "–†–æ–∫-–∫–ª–∞—Å—Å–∏–∫–∞",
            "artists": "–†–æ–∫-–≥—Ä—É–ø–ø–∞",
            "album_name": "–í–µ–ª–∏–∫–∏–µ —Ö–∏—Ç—ã —Ä–æ–∫–∞",
            "preview_url": None,
            "album_image": "https://via.placeholder.com/300",
            "spotify_url": "https://open.spotify.com" 
        },
        "hip-hop": {
            "id": random_id,
            "track_name": "–•–∏–ø-—Ö–æ–ø —Ç—Ä–µ–∫",
            "artists": "MC –ê—Ä—Ç–∏—Å—Ç",
            "album_name": "–ì–æ—Ä–æ–¥—Å–∫–∏–µ —Ä–∏—Ç–º—ã",
            "preview_url": None,
            "album_image": "https://via.placeholder.com/300",
            "spotify_url": "https://open.spotify.com"
        },
        "electronic": {
            "id": random_id,
            "track_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏—Ç",
            "artists": "DJ –ü—Ä–æ–¥—é—Å–µ—Ä",
            "album_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –≤–∏–±—Ä–∞—Ü–∏–∏",
            "preview_url": None,
            "album_image": "https://via.placeholder.com/300",
            "spotify_url": "https://open.spotify.com"
        },
        "jazz": {
            "id": random_id,
            "track_name": "–î–∂–∞–∑–æ–≤–∞—è –∏–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è",
            "artists": "–î–∂–∞–∑ –∫–≤–∞—Ä—Ç–µ—Ç",
            "album_name": "–í–µ—á–µ—Ä–∞ –¥–∂–∞–∑–∞",
            "preview_url": None,
            "album_image": "https://via.placeholder.com/300",
            "spotify_url": "https://open.spotify.com"
        },
        "classical": {
            "id": random_id,
            "track_name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∏–º—Ñ–æ–Ω–∏—è",
            "artists": "–í—ã–¥–∞—é—â–∏–π—Å—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä",
            "album_name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
            "preview_url": None,
            "album_image": "https://via.placeholder.com/300",
            "spotify_url": "https://open.spotify.com"
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
    if user_id:
        save_recommendation_history(user_id, 'music', random_id)
    
    # –ï—Å–ª–∏ –∂–∞–Ω—Ä —É–∫–∞–∑–∞–Ω –∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    if genre and genre in fallback_recommendations:
        return fallback_recommendations[genre]
    else:
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        random_genre = random.choice(list(fallback_recommendations.keys()))
        return fallback_recommendations[random_genre]

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∂–∞–Ω—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
BOOK_GENRE_RUSSIAN = {
    "fiction": "—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "fantasy": "—Ñ—ç–Ω—Ç–µ–∑–∏",
    "science": "–Ω–∞—É–∫–∞",
    "history": "–∏—Å—Ç–æ—Ä–∏—è",
    "biography": "–±–∏–æ–≥—Ä–∞—Ñ–∏—è",
    "poetry": "–ø–æ—ç–∑–∏—è"
}

async def get_book_recommendations_fallback(genre=None, user_id=None):
    """
    –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ–≥–¥–∞ API Google Books –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID
    random_id = generate_random_id()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–∞
    fallback_recommendations = {
        "fiction": {
            "id": random_id,
            "title": "–í–µ–ª–∏–∫–∏–π —Ä–æ–º–∞–Ω",
            "authors": "–ò–∑–≤–µ—Å—Ç–Ω—ã–π –ü–∏—Å–∞—Ç–µ–ª—å",
            "published_date": "2023",
            "description": "–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö –≥–µ—Ä–æ—è –≤ –∑–∞–≥–∞–¥–æ—á–Ω–æ–º –º–∏—Ä–µ.",
            "categories": "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
            "image_url": "https://via.placeholder.com/300",
            "preview_link": "https://books.google.com"
        },
        "fantasy": {
            "id": random_id,
            "title": "–•—Ä–æ–Ω–∏–∫–∏ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞",
            "authors": "–§–∞–Ω—Ç–∞—Å—Ç –í–æ–ª—à–µ–±–Ω–∏–∫–æ–≤",
            "published_date": "2024",
            "description": "–≠–ø–∏—á–µ—Å–∫–∞—è —Å–∞–≥–∞ –æ –º–∞–≥–∏–∏, –¥—Ä–∞–∫–æ–Ω–∞—Ö –∏ –≤–µ–ª–∏–∫–∏—Ö —Å—Ä–∞–∂–µ–Ω–∏—è—Ö.",
            "categories": "–§—ç–Ω—Ç–µ–∑–∏",
            "image_url": "https://via.placeholder.com/300",
            "preview_link": "https://books.google.com"
        },
        "science": {
            "id": random_id,
            "title": "–ù–∞—É–∫–∞ –±—É–¥—É—â–µ–≥–æ",
            "authors": "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ó–Ω–∞–Ω–∏–π",
            "published_date": "2025",
            "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—É—á–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –±—É–¥—É—â–µ–µ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞.",
            "categories": "–ù–∞—É–∫–∞, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "image_url": "https://via.placeholder.com/300",
            "preview_link": "https://books.google.com"
        },
        "history": {
            "id": random_id,
            "title": "–ó–∞–±—ã—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏",
            "authors": "–ò—Å—Ç–æ—Ä–∏–∫ –õ–µ—Ç–æ–ø–∏—Å—Ü–µ–≤",
            "published_date": "2024",
            "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π, –∏–∑–º–µ–Ω–∏–≤—à–∏—Ö —Ö–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏.",
            "categories": "–ò—Å—Ç–æ—Ä–∏—è",
            "image_url": "https://via.placeholder.com/300",
            "preview_link": "https://books.google.com"
        },
        "biography": {
            "id": random_id,
            "title": "–ñ–∏–∑–Ω—å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π",
            "authors": "–ë–∏–æ–≥—Ä–∞—Ñ –ñ–∏–∑–Ω–µ–ø–∏—Å–µ—Ü",
            "published_date": "2023",
            "description": "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –≤—ã–¥–∞—é—â–µ–π—Å—è –ª–∏—á–Ω–æ—Å—Ç–∏, –ø—Ä–µ–æ–¥–æ–ª–µ–≤—à–µ–π –≤—Å–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É.",
            "categories": "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
            "image_url": "https://via.placeholder.com/300",
            "preview_link": "https://books.google.com"
        },
        "poetry": {
            "id": random_id,
            "title": "–°–±–æ—Ä–Ω–∏–∫ —Å—Ç–∏—Ö–æ–≤ –æ –≤–µ—á–Ω–æ–º",
            "authors": "–ü–æ—ç—Ç –†–∏—Ñ–º–æ–ø–ª—ë—Ç–æ–≤",
            "published_date": "2025",
            "description": "–°–±–æ—Ä–Ω–∏–∫ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤ –æ –ª—é–±–≤–∏, –∂–∏–∑–Ω–∏ –∏ –ø–æ–∏—Å–∫–µ —Å–º—ã—Å–ª–∞.",
            "categories": "–ü–æ—ç–∑–∏—è",
            "image_url": "https://via.placeholder.com/300",
            "preview_link": "https://books.google.com"
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
    if user_id:
        try:
            save_recommendation_history(user_id, 'book', random_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
    
    # –ï—Å–ª–∏ –∂–∞–Ω—Ä —É–∫–∞–∑–∞–Ω –∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    if genre and genre in fallback_recommendations:
        return fallback_recommendations[genre]
    else:
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        random_genre = random.choice(list(fallback_recommendations.keys()))
        return fallback_recommendations[random_genre]

async def get_book_recommendations(genre=None, user_id=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        if genre:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –∂–∞–Ω—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            ru_query = BOOK_GENRE_RUSSIAN.get(genre, genre)
            query = f"subject:{genre} OR {ru_query}"
            logger.info(f"–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        else:
            # –°–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            categories = ["—Ä–æ–º–∞–Ω", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "–∏—Å—Ç–æ—Ä–∏—è", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è", "–ø–æ—ç–∑–∏—è"]
            random_category = random.choice(categories)
            query = f"subject:{random_category}"
            logger.info(f"–ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        url = f"https://www.googleapis.com/books/v1/volumes?q={query}&maxResults=40&langRestrict=ru&country=RU"
        if GOOGLE_BOOKS_API_KEY:
            url += f"&key={GOOGLE_BOOKS_API_KEY}"
        
        logger.info(f"URL –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Books API: {url}")
        
        try:
            response = requests.get(url, timeout=10)
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞ —Å API –∫–ª—é—á–æ–º, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
            if response.status_code == 403 and GOOGLE_BOOKS_API_KEY:
                logger.warning("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å API –∫–ª—é—á–æ–º Google Books, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –∫–ª—é—á–∞")
                url = url.replace(f"&key={GOOGLE_BOOKS_API_KEY}", "")
                response = requests.get(url, timeout=10)
            
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            data = response.json()
            
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API: {response.status_code}")
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥: {len(data.get('items', []))}")
            
            if 'items' in data and data['items']:
                # –ò—Å–∫–ª—é—á–∞–µ–º –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if user_id:
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    cursor.execute('''
                    SELECT item_id FROM recommendation_history
                    WHERE user_id = ? AND category = 'book'
                    ''', (user_id,))
                    recommended_ids = [row['item_id'] for row in cursor.fetchall()]
                    conn.close()
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
                    filtered_results = []
                    for book in data['items']:
                        if book['id'] not in recommended_ids:
                            volume_info = book.get('volumeInfo', {})
                            language = volume_info.get('language', '')
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∫–Ω–∏–≥–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞
                            if language == 'ru' or not language:
                                filtered_results.append(book)
                    
                    if filtered_results:
                        book = random.choice(filtered_results)
                        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞ (–Ω–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏): {book.get('id', 'unknown')}")
                    else:
                        # –ï—Å–ª–∏ –≤—Å–µ –∫–Ω–∏–≥–∏ —É–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ—Ç —Ä—É—Å—Å–∫–∏—Ö –∫–Ω–∏–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–∏–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                        return await get_book_recommendations_fallback(genre, user_id)
                else:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
                    russian_books = []
                    for book in data['items']:
                        volume_info = book.get('volumeInfo', {})
                        language = volume_info.get('language', '')
                        if language == 'ru' or not language:
                            russian_books.append(book)
                    
                    if russian_books:
                        book = random.choice(russian_books)
                        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: {book.get('id', 'unknown')}")
                    else:
                        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                        return await get_book_recommendations_fallback(genre, user_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
                if user_id:
                    try:
                        save_recommendation_history(user_id, 'book', book['id'])
                        logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
                volume_info = book.get('volumeInfo', {})
                title = volume_info.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                authors = ', '.join(volume_info.get('authors', ['–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω']))
                published_date = volume_info.get('publishedDate', '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
                if published_date and len(published_date) >= 4:
                    published_date = published_date[:4]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–¥
                description = volume_info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                if description and len(description) > 300:
                    description = description[:300] + '...'  # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                categories = ', '.join(volume_info.get('categories', ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞']))
                image_url = volume_info.get('imageLinks', {}).get('thumbnail')
                preview_link = volume_info.get('previewLink')
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    'id': book['id'],
                    'title': title,
                    'authors': authors,
                    'published_date': published_date,
                    'description': description,
                    'categories': categories,
                    'image_url': image_url,
                    'preview_link': preview_link
                }
                
                logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–Ω–∏–≥–∏: {title}")
                return result
            else:
                logger.warning(f"API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'items'")
                return await get_book_recommendations_fallback(genre, user_id)
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Books API: {e}")
            return await get_book_recommendations_fallback(genre, user_id)
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥: {e}")
        return await get_book_recommendations_fallback(genre, user_id)

# –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    register_user(user.id, user.username, user.first_name, user.last_name)
    
    keyboard = [
        [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="category_movies")],
        [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="category_music")],
        [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="category_books")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å —Ñ–∏–ª—å–º–æ–≤, –º—É–∑—ã–∫–∏ –∏ –∫–Ω–∏–≥. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
        reply_markup=reply_markup
    )
    
    return START_ROUTES

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—é* ü§ñ\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/movies - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤\n"
        "/music - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏\n"
        "/books - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥\n"
        "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é\n"
        "3. –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üòä",
        parse_mode='Markdown'
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )
    return ConversationHandler.END

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "category_movies":
        movie_genres = [
            [
                InlineKeyboardButton("–ë–æ–µ–≤–∏–∫", callback_data="movie_genre_28"),
                InlineKeyboardButton("–ö–æ–º–µ–¥–∏—è", callback_data="movie_genre_35")
            ],
            [
                InlineKeyboardButton("–î—Ä–∞–º–∞", callback_data="movie_genre_18"),
                InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="movie_genre_878")
            ],
            [
                InlineKeyboardButton("–£–∂–∞—Å—ã", callback_data="movie_genre_27"),
                InlineKeyboardButton("–†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="movie_genre_10749")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º", callback_data="movie_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(movie_genres)
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )
        return GENRE_SELECTION
    
    elif callback_data == "category_music":
        music_genres = [
            [
                InlineKeyboardButton("–ü–æ–ø", callback_data="music_genre_pop"),
                InlineKeyboardButton("–†–æ–∫", callback_data="music_genre_rock")
            ],
            [
                InlineKeyboardButton("–•–∏–ø-—Ö–æ–ø", callback_data="music_genre_hip-hop"),
                InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è", callback_data="music_genre_electronic")
            ],
            [
                InlineKeyboardButton("–î–∂–∞–∑", callback_data="music_genre_jazz"),
                InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", callback_data="music_genre_classical")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –º—É–∑—ã–∫–∞", callback_data="music_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(music_genres)
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )
        return GENRE_SELECTION
    
    elif callback_data == "category_books":
        book_genres = [
            [
                InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="book_genre_fiction"),
                InlineKeyboardButton("–§—ç–Ω—Ç–µ–∑–∏", callback_data="book_genre_fantasy")
            ],
            [
                InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data="book_genre_science"),
                InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="book_genre_history")
            ],
            [
                InlineKeyboardButton("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è", callback_data="book_genre_biography"),
                InlineKeyboardButton("–ü–æ—ç–∑–∏—è", callback_data="book_genre_poetry")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞", callback_data="book_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(book_genres)
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )
        return GENRE_SELECTION
    
    elif callback_data == "help":
        help_keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(help_keyboard)
        
        await query.edit_message_text(
            text="ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—é* ü§ñ\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/movies - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤\n"
            "/music - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏\n"
            "/books - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥\n"
            "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é\n"
            "3. –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üòä",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return START_ROUTES
    
    elif callback_data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="category_movies")],
            [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="category_music")],
            [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="category_books")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=reply_markup
        )
        return START_ROUTES
    
    elif callback_data == "start_over":
        keyboard = [
            [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="category_movies")],
            [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="category_music")],
            [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="category_books")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=reply_markup
        )
        return START_ROUTES
    
    return START_ROUTES

async def handle_genre_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    user_id = update.effective_user.id
    
    if callback_data.startswith("movie_genre_"):
        genre_id = callback_data.split("_")[-1]
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–∏—Å–∫–µ
        await query.edit_message_text(
            text=f"üîç –ò—â—É —Ñ–∏–ª—å–º –≤ –∂–∞–Ω—Ä–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è±Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="category_movies")]])
        )
        
        try:
            movie = await get_movie_recommendations(genre_id, user_id)
            
            if movie:
                context.user_data['current_movie'] = movie
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–∏–ª—å–º–µ
                message_text = (
                    f"üé¨ *{movie['title']}*\n"
                    f"({movie['original_title']}, {movie['year']})\n\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10\n"
                    f"üé≠ –ñ–∞–Ω—Ä—ã: {movie['genres']}\n\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{movie['overview']}"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_movie_{movie['id']}_5"),
                        InlineKeyboardButton("üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_movie_{movie['id']}_1")
                    ],
                    [InlineKeyboardButton("üîÑ –ï—â–µ —Ñ–∏–ª—å–º", callback_data="movie_random")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_movies")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if movie['poster_url']:
                    await query.message.reply_photo(
                        photo=movie['poster_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    await query.delete_message()
                else:
                    await query.edit_message_text(
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                
                return MOVIE_ACTIONS
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = [
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_movies")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=reply_markup
                )
                return GENRE_SELECTION
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_movies")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
            return GENRE_SELECTION
    
    elif callback_data == "movie_random":
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–∏—Å–∫–µ
        await query.edit_message_text(
            text=f"üîç –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è±Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="category_movies")]])
        )
        
        try:
            movie = await get_movie_recommendations(None, user_id)
            
            if movie:
                context.user_data['current_movie'] = movie
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–∏–ª—å–º–µ
                message_text = (
                    f"üé¨ *{movie['title']}*\n"
                    f"({movie['original_title']}, {movie['year']})\n\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10\n"
                    f"üé≠ –ñ–∞–Ω—Ä—ã: {movie['genres']}\n\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{movie['overview']}"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_movie_{movie['id']}_5"),
                        InlineKeyboardButton("üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_movie_{movie['id']}_1")
                    ],
                    [InlineKeyboardButton("üîÑ –ï—â–µ —Ñ–∏–ª—å–º", callback_data="movie_random")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_movies")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if movie['poster_url']:
                    await query.message.reply_photo(
                        photo=movie['poster_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    await query.delete_message()
                else:
                    await query.edit_message_text(
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                
                return MOVIE_ACTIONS
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = [
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_movies")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=reply_markup
                )
                return GENRE_SELECTION
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞: {e}")
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_movies")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
            return GENRE_SELECTION
    
    elif callback_data.startswith("music_genre_"):
        genre = callback_data.split("_")[-1]
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –∂–∞–Ω—Ä–∞: {genre}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–∏—Å–∫–µ
        await query.edit_message_text(
            text=f"üîç –ò—â—É –º—É–∑—ã–∫—É –≤ –∂–∞–Ω—Ä–µ {genre}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è±Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="category_music")]])
        )
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            music = await get_music_recommendations(genre, user_id)
            
            if music:
                context.user_data['current_music'] = music
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º—É–∑—ã–∫–µ
                message_text = (
                    f"üéµ *{music['track_name']}*\n"
                    f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {music['artists']}\n"
                    f"üíø –ê–ª—å–±–æ–º: {music['album_name']}\n\n"
                )
                
                # –ï—Å–ª–∏ –≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å—Ç—å "placeholder", –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
                if music['album_image'] and "placeholder" in music['album_image']:
                    message_text += "_‚ùó –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API._\n\n"
                
                keyboard = [
                    [
                        InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_music_{music['id']}_5"),
                        InlineKeyboardButton("üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_music_{music['id']}_1")
                    ],
                    [InlineKeyboardButton("üîÑ –ï—â–µ –º—É–∑—ã–∫–∞", callback_data="music_random")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_music")]
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
                if music['spotify_url']:
                    keyboard.insert(0, [InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å –Ω–∞ Spotify", url=music['spotify_url'])])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if music['album_image']:
                    await query.message.reply_photo(
                        photo=music['album_image'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    try:
                        await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ: {e}")
                else:
                    await query.edit_message_text(
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                
                return MUSIC_ACTIONS
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –¥–ª—è –∂–∞–Ω—Ä–∞: {genre}")
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = [
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_music")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.",
                    reply_markup=reply_markup
                )
                return GENRE_SELECTION
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: {e}")
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_music")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–∑—ã–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
            return GENRE_SELECTION
    
    elif callback_data == "music_random":
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–∏—Å–∫–µ
        await query.edit_message_text(
            text=f"üîç –ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –º—É–∑—ã–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è±Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="category_music")]])
        )
        
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä
            random_genre = random.choice(list(SPOTIFY_GENRE_MAPPING.keys()))
            logger.info(f"–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä –¥–ª—è –º—É–∑—ã–∫–∏: {random_genre}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            music = await get_music_recommendations(random_genre, user_id)
            
            if music:
                context.user_data['current_music'] = music
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º—É–∑—ã–∫–µ
                message_text = (
                    f"üéµ *{music['track_name']}*\n"
                    f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {music['artists']}\n"
                    f"üíø –ê–ª—å–±–æ–º: {music['album_name']}\n\n"
                )
                
                # –ï—Å–ª–∏ –≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å—Ç—å "placeholder", –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
                if music['album_image'] and "placeholder" in music['album_image']:
                    message_text += "_‚ùó –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API._\n\n"
                
                keyboard = [
                    [
                        InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_music_{music['id']}_5"),
                        InlineKeyboardButton("üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_music_{music['id']}_1")
                    ],
                    [InlineKeyboardButton("üîÑ –ï—â–µ –º—É–∑—ã–∫–∞", callback_data="music_random")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_music")]
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
                if music['spotify_url']:
                    keyboard.insert(0, [InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å –Ω–∞ Spotify", url=music['spotify_url'])])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if music['album_image']:
                    await query.message.reply_photo(
                        photo=music['album_image'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    try:
                        await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ: {e}")
                else:
                    await query.edit_message_text(
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                
                return MUSIC_ACTIONS
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –º—É–∑—ã–∫–∏")
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = [
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_music")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=reply_markup
                )
                return GENRE_SELECTION
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –º—É–∑—ã–∫–∏: {e}")
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_music")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–∑—ã–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
            return GENRE_SELECTION
    
    elif callback_data.startswith("book_genre_"):
        genre = callback_data.split("_")[-1]
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏ –∂–∞–Ω—Ä–∞: {genre}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–∏—Å–∫–µ
        await query.edit_message_text(
            text=f"üîç –ò—â—É –∫–Ω–∏–≥—É –≤ –∂–∞–Ω—Ä–µ {genre}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è±Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="category_books")]])
        )
        
        try:
            book = await get_book_recommendations(genre, user_id)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–∏–≥–∏: {'–£—Å–ø–µ—à–Ω–æ' if book else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
            
            if book:
                context.user_data['current_book'] = book
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–Ω–∏–≥–µ
                message_text = (
                    f"üìö *{book['title']}*\n"
                    f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book['authors']}\n"
                    f"üìÖ –ì–æ–¥: {book['published_date']}\n"
                    f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {book['categories']}\n\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{book['description']}"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_book_{book['id']}_5"),
                        InlineKeyboardButton("üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_book_{book['id']}_1")
                    ],
                    [InlineKeyboardButton("üîÑ –ï—â–µ –∫–Ω–∏–≥–∞", callback_data="book_random")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_books")]
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
                if book['preview_link']:
                    keyboard.insert(0, [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", url=book['preview_link'])])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if book['image_url']:
                    await query.message.reply_photo(
                        photo=book['image_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    try:
                        await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ: {e}")
                else:
                    await query.edit_message_text(
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                
                return BOOK_ACTIONS
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –¥–ª—è –∂–∞–Ω—Ä–∞: {genre}")
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = [
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_books")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.",
                    reply_markup=reply_markup
                )
                return GENRE_SELECTION
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏: {e}")
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_books")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
            return GENRE_SELECTION
    
    elif callback_data == "book_random":
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–∏—Å–∫–µ
        await query.edit_message_text(
            text=f"üîç –ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è±Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="category_books")]])
        )
        
        try:
            book = await get_book_recommendations(None, user_id)
            
            if book:
                context.user_data['current_book'] = book
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–Ω–∏–≥–µ
                message_text = (
                    f"üìö *{book['title']}*\n"
                    f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book['authors']}\n"
                    f"üìÖ –ì–æ–¥: {book['published_date']}\n"
                    f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {book['categories']}\n\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{book['description']}"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_book_{book['id']}_5"),
                        InlineKeyboardButton("üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_book_{book['id']}_1")
                    ],
                    [InlineKeyboardButton("üîÑ –ï—â–µ –∫–Ω–∏–≥–∞", callback_data="book_random")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_books")]
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
                if book['preview_link']:
                    keyboard.insert(0, [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", url=book['preview_link'])])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if book['image_url']:
                    await query.message.reply_photo(
                        photo=book['image_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    try:
                        await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ: {e}")
                else:
                    await query.edit_message_text(
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                
                return BOOK_ACTIONS
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = [
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_books")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=reply_markup
                )
                return GENRE_SELECTION
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏: {e}")
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_books")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
            return GENRE_SELECTION
    
    elif callback_data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="category_movies")],
            [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="category_music")],
            [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="category_books")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=reply_markup
        )
        return START_ROUTES
    
    return GENRE_SELECTION

async def handle_movie_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    user_id = update.effective_user.id
    
    if callback_data.startswith("rate_movie_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–∞
        _, _, movie_id, rating = callback_data.split("_")
        rating = int(rating)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        movie = context.user_data.get('current_movie')
        if movie:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_preference(user_id, 'movie', movie.get('genres', ''), movie_id, rating)
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏
            await query.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –æ—Ü–µ–Ω–∫—É! –Ø —É—á—Ç—É —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –±—É–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö."
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∂–∞–Ω—Ä–∞–º —Ñ–∏–ª—å–º–æ–≤
        keyboard = [
            [InlineKeyboardButton("üîÑ –ï—â–µ —Ñ–∏–ª—å–º", callback_data="movie_random")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_movies")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup
        )
        return MOVIE_ACTIONS
    
    elif callback_data == "movie_random":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∏ –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        cancel_keyboard = [[InlineKeyboardButton("‚è±Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="category_movies")]]
        cancel_markup = InlineKeyboardMarkup(cancel_keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        searching_message = await query.message.reply_text(
            "üîç –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –≤–∞—Å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=cancel_markup
        )
        
        try:
            # –ù–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
            movie = await get_movie_recommendations(None, user_id)
            
            if movie:
                context.user_data['current_movie'] = movie
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–∏–ª—å–º–µ
                message_text = (
                    f"üé¨ *{movie['title']}*\n"
                    f"({movie['original_title']}, {movie['year']})\n\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10\n"
                    f"üé≠ –ñ–∞–Ω—Ä—ã: {movie['genres']}\n\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{movie['overview']}"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_movie_{movie['id']}_5"),
                        InlineKeyboardButton("üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_movie_{movie['id']}_1")
                    ],
                    [InlineKeyboardButton("üîÑ –ï—â–µ —Ñ–∏–ª—å–º", callback_data="movie_random")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_movies")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                await searching_message.delete()
                
                if movie['poster_url']:
                    await query.message.reply_photo(
                        photo=movie['poster_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                else:
                    await query.message.reply_text(
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                
                return MOVIE_ACTIONS
            else:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                await searching_message.delete()
                
                await query.message.reply_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="category_movies")]])
                )
                return MOVIE_ACTIONS
        
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                await searching_message.delete()
            except:
                pass
            
            await query.message.reply_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="category_movies")]])
            )
            return MOVIE_ACTIONS
    
    elif callback_data == "category_movies":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤
        movie_genres = [
            [
                InlineKeyboardButton("–ë–æ–µ–≤–∏–∫", callback_data="movie_genre_28"),
                InlineKeyboardButton("–ö–æ–º–µ–¥–∏—è", callback_data="movie_genre_35")
            ],
            [
                InlineKeyboardButton("–î—Ä–∞–º–∞", callback_data="movie_genre_18"),
                InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="movie_genre_878")
            ],
            [
                InlineKeyboardButton("–£–∂–∞—Å—ã", callback_data="movie_genre_27"),
                InlineKeyboardButton("–†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="movie_genre_10749")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º", callback_data="movie_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(movie_genres)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        return GENRE_SELECTION
    
    elif callback_data == "back_to_main":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="category_movies")],
            [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="category_music")],
            [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="category_books")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await query.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=reply_markup
        )
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        return START_ROUTES
    
    return MOVIE_ACTIONS

async def handle_music_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    user_id = update.effective_user.id
    
    if callback_data.startswith("rate_music_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –º—É–∑—ã–∫–∏
        _, _, music_id, rating = callback_data.split("_")
        rating = int(rating)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        music = context.user_data.get('current_music')
        if music:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_preference(user_id, 'music', '', music_id, rating)
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏
            await query.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –æ—Ü–µ–Ω–∫—É! –Ø —É—á—Ç—É —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –±—É–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö."
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∂–∞–Ω—Ä–∞–º –º—É–∑—ã–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –ï—â–µ –º—É–∑—ã–∫–∞", callback_data="music_random")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_music")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup
        )
        return MUSIC_ACTIONS
    
    elif callback_data == "music_random":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–æ–≤
        music_genres = [
            [
                InlineKeyboardButton("–ü–æ–ø", callback_data="music_genre_pop"),
                InlineKeyboardButton("–†–æ–∫", callback_data="music_genre_rock")
            ],
            [
                InlineKeyboardButton("–•–∏–ø-—Ö–æ–ø", callback_data="music_genre_hip-hop"),
                InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è", callback_data="music_genre_electronic")
            ],
            [
                InlineKeyboardButton("–î–∂–∞–∑", callback_data="music_genre_jazz"),
                InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", callback_data="music_genre_classical")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –º—É–∑—ã–∫–∞", callback_data="music_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(music_genres)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
        await query.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        return GENRE_SELECTION
    
    elif callback_data == "category_music":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–æ–≤
        music_genres = [
            [
                InlineKeyboardButton("–ü–æ–ø", callback_data="music_genre_pop"),
                InlineKeyboardButton("–†–æ–∫", callback_data="music_genre_rock")
            ],
            [
                InlineKeyboardButton("–•–∏–ø-—Ö–æ–ø", callback_data="music_genre_hip-hop"),
                InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è", callback_data="music_genre_electronic")
            ],
            [
                InlineKeyboardButton("–î–∂–∞–∑", callback_data="music_genre_jazz"),
                InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", callback_data="music_genre_classical")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –º—É–∑—ã–∫–∞", callback_data="music_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(music_genres)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
        await query.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
        return GENRE_SELECTION
    
    elif callback_data == "back_to_main":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="category_movies")],
            [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="category_music")],
            [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="category_books")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
        await query.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=reply_markup
        )
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
        return START_ROUTES
    
    return MUSIC_ACTIONS

async def handle_book_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    user_id = update.effective_user.id
    
    if callback_data.startswith("rate_book_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥–∏
        _, _, book_id, rating = callback_data.split("_")
        rating = int(rating)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–∏–≥—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        book = context.user_data.get('current_book')
        if book:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_preference(user_id, 'book', book.get('categories', ''), book_id, rating)
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏
            await query.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –æ—Ü–µ–Ω–∫—É! –Ø —É—á—Ç—É —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –±—É–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö."
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∂–∞–Ω—Ä–∞–º –∫–Ω–∏–≥
        keyboard = [
            [InlineKeyboardButton("üîÑ –ï—â–µ –∫–Ω–∏–≥–∞", callback_data="book_random")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_books")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup
        )
        return BOOK_ACTIONS
    
    elif callback_data == "book_random":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∏ –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        cancel_keyboard = [[InlineKeyboardButton("‚è±Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="category_books")]]
        cancel_markup = InlineKeyboardMarkup(cancel_keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        searching_message = await query.message.reply_text(
            "üîç –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –¥–ª—è –≤–∞—Å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=cancel_markup
        )
        
        try:
            # –ù–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É
            book = await get_book_recommendations(None, user_id)
            
            if book:
                context.user_data['current_book'] = book
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–Ω–∏–≥–µ
                message_text = (
                    f"üìö *{book['title']}*\n"
                    f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book['authors']}\n"
                    f"üìÖ –ì–æ–¥: {book['published_date']}\n"
                    f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {book['categories']}\n\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{book['description']}"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_book_{book['id']}_5"),
                        InlineKeyboardButton("üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_book_{book['id']}_1")
                    ],
                    [InlineKeyboardButton("üîÑ –ï—â–µ –∫–Ω–∏–≥–∞", callback_data="book_random")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="category_books")]
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
                if book['preview_link']:
                    keyboard.insert(0, [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", url=book['preview_link'])])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                await searching_message.delete()
                
                if book['image_url']:
                    await query.message.reply_photo(
                        photo=book['image_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                else:
                    await query.message.reply_text(
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                
                return BOOK_ACTIONS
            else:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                await searching_message.delete()
                
                await query.message.reply_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="category_books")]])
                )
                return BOOK_ACTIONS
        
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                await searching_message.delete()
            except:
                pass
            
            await query.message.reply_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="category_books")]])
            )
            return BOOK_ACTIONS
    
    elif callback_data == "category_books":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–æ–≤ –∫–Ω–∏–≥
        book_genres = [
            [
                InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="book_genre_fiction"),
                InlineKeyboardButton("–§—ç–Ω—Ç–µ–∑–∏", callback_data="book_genre_fantasy")
            ],
            [
                InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data="book_genre_science"),
                InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="book_genre_history")
            ],
            [
                InlineKeyboardButton("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è", callback_data="book_genre_biography"),
                InlineKeyboardButton("–ü–æ—ç–∑–∏—è", callback_data="book_genre_poetry")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞", callback_data="book_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(book_genres)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        return GENRE_SELECTION
    
    elif callback_data == "back_to_main":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="category_movies")],
            [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="category_music")],
            [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="category_books")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await query.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=reply_markup
        )
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        return START_ROUTES
    
    return BOOK_ACTIONS

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
    SELECT category, item_id, recommendation_date FROM recommendation_history
    WHERE user_id = ?
    ORDER BY recommendation_date DESC
    LIMIT 10
    ''', (user_id,))
    
    history = cursor.fetchall()
    conn.close()
    
    if not history:
        await update.message.reply_text(
            "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ª—É—á–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    message_text = "*–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:*\n\n"
    
    for item in history:
        category, item_id, date = item
        category_emoji = "üé¨" if category == "movie" else "üéµ" if category == "music" else "üìö"
        date_formatted = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
        
        if category == "movie":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –ø–æ ID
            try:
                url = f"https://api.themoviedb.org/3/movie/{item_id}?api_key={TMDB_API_KEY}&language=ru"
                response = requests.get(url, timeout=10)
                movie_data = response.json()
                title = movie_data.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message_text += f"{category_emoji} *–§–∏–ª—å–º:* {title} ({date_formatted})\n"
            except:
                message_text += f"{category_emoji} *–§–∏–ª—å–º:* ID {item_id} ({date_formatted})\n"
        
        elif category == "music":
            # –î–ª—è –º—É–∑—ã–∫–∏ –º—ã –Ω–µ –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º
            message_text += f"{category_emoji} *–ú—É–∑—ã–∫–∞:* ID {item_id} ({date_formatted})\n"
        
        elif category == "book":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –ø–æ ID
            try:
                url = f"https://www.googleapis.com/books/v1/volumes/{item_id}"
                if GOOGLE_BOOKS_API_KEY:
                    url += f"?key={GOOGLE_BOOKS_API_KEY}"
                response = requests.get(url, timeout=10)
                book_data = response.json()
                title = book_data.get('volumeInfo', {}).get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message_text += f"{category_emoji} *–ö–Ω–∏–≥–∞:* {title} ({date_formatted})\n"
            except:
                message_text += f"{category_emoji} *–ö–Ω–∏–≥–∞:* ID {item_id} ({date_formatted})\n"
    
    await update.message.reply_text(
        message_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

async def movies_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ —Ñ–∏–ª—å–º–æ–≤
    movie_genres = [
        [
            InlineKeyboardButton("–ë–æ–µ–≤–∏–∫", callback_data="movie_genre_28"),
            InlineKeyboardButton("–ö–æ–º–µ–¥–∏—è", callback_data="movie_genre_35")
        ],
        [
            InlineKeyboardButton("–î—Ä–∞–º–∞", callback_data="movie_genre_18"),
            InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="movie_genre_878")
        ],
        [
            InlineKeyboardButton("–£–∂–∞—Å—ã", callback_data="movie_genre_27"),
            InlineKeyboardButton("–†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="movie_genre_10749")
        ],
        [
            InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º", callback_data="movie_random"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(movie_genres)
    
    await update.message.reply_text(
        text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
        reply_markup=reply_markup
    )
    
    return GENRE_SELECTION

async def music_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ –º—É–∑—ã–∫–∏
    music_genres = [
        [
            InlineKeyboardButton("–ü–æ–ø", callback_data="music_genre_pop"),
            InlineKeyboardButton("–†–æ–∫", callback_data="music_genre_rock")
        ],
        [
            InlineKeyboardButton("–•–∏–ø-—Ö–æ–ø", callback_data="music_genre_hip-hop"),
            InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è", callback_data="music_genre_electronic")
        ],
        [
            InlineKeyboardButton("–î–∂–∞–∑", callback_data="music_genre_jazz"),
            InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", callback_data="music_genre_classical")
        ],
        [
            InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –º—É–∑—ã–∫–∞", callback_data="music_random"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(music_genres)
    
    await update.message.reply_text(
        text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
        reply_markup=reply_markup
    )
    
    return GENRE_SELECTION

async def books_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ –∫–Ω–∏–≥
    book_genres = [
        [
            InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="book_genre_fiction"),
            InlineKeyboardButton("–§—ç–Ω—Ç–µ–∑–∏", callback_data="book_genre_fantasy")
        ],
        [
            InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data="book_genre_science"),
            InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="book_genre_history")
        ],
        [
            InlineKeyboardButton("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è", callback_data="book_genre_biography"),
            InlineKeyboardButton("–ü–æ—ç–∑–∏—è", callback_data="book_genre_poetry")
        ],
        [
            InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞", callback_data="book_random"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(book_genres)
    
    await update.message.reply_text(
        text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
        reply_markup=reply_markup
    )
    
    return GENRE_SELECTION

async def handle_fallback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–∞–ª–∏ –∏–∑ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {callback_data}")
    
    if callback_data == "category_books":
        book_genres = [
            [
                InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="book_genre_fiction"),
                InlineKeyboardButton("–§—ç–Ω—Ç–µ–∑–∏", callback_data="book_genre_fantasy")
            ],
            [
                InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data="book_genre_science"),
                InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="book_genre_history")
            ],
            [
                InlineKeyboardButton("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è", callback_data="book_genre_biography"),
                InlineKeyboardButton("–ü–æ—ç–∑–∏—è", callback_data="book_genre_poetry")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞", callback_data="book_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(book_genres)
        
        try:
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.message.reply_text(
                text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
                reply_markup=reply_markup
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
        return GENRE_SELECTION
    
    elif callback_data == "category_movies":
        movie_genres = [
            [
                InlineKeyboardButton("–ë–æ–µ–≤–∏–∫", callback_data="movie_genre_28"),
                InlineKeyboardButton("–ö–æ–º–µ–¥–∏—è", callback_data="movie_genre_35")
            ],
            [
                InlineKeyboardButton("–î—Ä–∞–º–∞", callback_data="movie_genre_18"),
                InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="movie_genre_878")
            ],
            [
                InlineKeyboardButton("–£–∂–∞—Å—ã", callback_data="movie_genre_27"),
                InlineKeyboardButton("–†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="movie_genre_10749")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º", callback_data="movie_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(movie_genres)
        
        try:
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.message.reply_text(
                text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
                reply_markup=reply_markup
            )
        
        return GENRE_SELECTION
    
    elif callback_data == "category_music":
        music_genres = [
            [
                InlineKeyboardButton("–ü–æ–ø", callback_data="music_genre_pop"),
                InlineKeyboardButton("–†–æ–∫", callback_data="music_genre_rock")
            ],
            [
                InlineKeyboardButton("–•–∏–ø-—Ö–æ–ø", callback_data="music_genre_hip-hop"),
                InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è", callback_data="music_genre_electronic")
            ],
            [
                InlineKeyboardButton("–î–∂–∞–∑", callback_data="music_genre_jazz"),
                InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", callback_data="music_genre_classical")
            ],
            [
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –º—É–∑—ã–∫–∞", callback_data="music_random"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(music_genres)
        
        try:
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.message.reply_text(
                text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:",
                reply_markup=reply_markup
            )
        
        return GENRE_SELECTION
    
    elif callback_data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="category_movies")],
            [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="category_music")],
            [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="category_books")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.message.reply_text(
                text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
                reply_markup=reply_markup
            )
        
        return START_ROUTES
    
    else:
        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="category_movies")],
            [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="category_music")],
            [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="category_books")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=reply_markup
        )
        
        return START_ROUTES

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START_ROUTES: [
                CallbackQueryHandler(handle_category_selection, pattern="^category_.*|^help$|^back_to_main$|^start_over$")
            ],
            GENRE_SELECTION: [
                CallbackQueryHandler(handle_genre_selection, pattern="^(movie|music|book)_.*|^back_to_main$")
            ],
            MOVIE_ACTIONS: [
                CallbackQueryHandler(handle_movie_actions, pattern="^rate_movie_.*|^movie_.*|^category_movies$|^back_to_main$")
            ],
            MUSIC_ACTIONS: [
                CallbackQueryHandler(handle_music_actions, pattern="^rate_music_.*|^music_.*|^category_music$|^back_to_main$")
            ],
            BOOK_ACTIONS: [
                CallbackQueryHandler(handle_book_actions, pattern="^rate_book_.*|^book_.*|^category_books$|^back_to_main$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        name="main_conversation",
        persistent=False,
        allow_reentry=True,
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("history", show_history))
    application.add_handler(CommandHandler("movies", movies_command))
    application.add_handler(CommandHandler("music", music_command))
    application.add_handler(CommandHandler("books", books_command))
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ConversationHandler
    application.add_handler(CallbackQueryHandler(handle_fallback_callback))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
